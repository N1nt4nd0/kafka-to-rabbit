name: Build and Deploy Spring App with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Run Docker Compose
        run: docker-compose -p k2r-docker up -d --build
        env:
          K2R_KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.K2R_KAFKA_BOOTSTRAP_SERVERS }}
          K2R_RABBIT_HOST: ${{ secrets.K2R_RABBIT_HOST }}
          K2R_RABBIT_PORT: ${{ secrets.K2R_RABBIT_PORT }}
          K2R_RABBIT_USERNAME: ${{ secrets.K2R_RABBIT_USERNAME }}
          K2R_RABBIT_PASSWORD: ${{ secrets.K2R_RABBIT_PASSWORD }}
          K2R_DB_URL: ${{ secrets.K2R_DB_URL }}
          K2R_DB_NAME: ${{ secrets.K2R_DB_NAME }}
          K2R_REDIS_HOST: ${{ secrets.K2R_REDIS_HOST }}
          K2R_REDIS_PORT: ${{ secrets.K2R_REDIS_PORT }}

      - name: Wait for Spring app to start
        run: |
          echo "Waiting for Spring app to start..."
          sleep 30

      - name: Check container status
        run: docker ps -a

      - name: Fetch Docker container logs
        run: docker logs k2r-spring-boot-app

      - name: Test Spring Application
        run: |
          response=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8080/api/company/list)
          if [ "$response" -ne 200 ]; then
            echo "Application failed to start or returned non-200 status code: $response"
            exit 1
          else
            echo "Application started successfully with response code: $response"
          fi
